version: "3.9"

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppass}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10

  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file: .env
    environment:
      DEBUG: "0"
      DJANGO_RUNSERVER: "0"   # En prod usamos gunicorn
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      GUNICORN_WORKERS: "4"
      GUNICORN_THREADS: "2"
      GUNICORN_TIMEOUT: "180"
    volumes:
      - static:/app/staticfiles
      - media:/app/media
    depends_on:
      db:
        condition: service_healthy

  nginx:
    image: nginx:1.27-alpine
    restart: always
    depends_on:
      - web
    ports:
      - "80:80"
      # Si usarás HTTPS con un proxy/Cloudflare/Traefik, podemos agregar 443 aquí
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static:/static
      - media:/media

volumes:
  pgdata:
  static:
  media:
